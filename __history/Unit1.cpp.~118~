//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include <memory>
#include <vector>

#include <pcre.h>

#include "Unit1.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)
#pragma resource "*.dfm"

TForm1 *Form1;

//---------------------------------------------------------------------------

__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
	// Instantiate preset manager.

	FPresets = new TPresets(ExtractFilePath(Application->ExeName));

    // Populate combobox with presets.

	std::vector <AnsiString> List;
	FPresets->AvailablePresets(List);

	for(std::vector<AnsiString>::iterator idx = List.begin(); idx != List.end(); ++idx)
	{
        PresetsComboBox->Items->Add(*idx);
    }
}

//---------------------------------------------------------------------------

__fastcall TForm1::~TForm1()
{
	delete FPresets;
}

//---------------------------------------------------------------------------

void __fastcall TForm1::InputSpeedButtonClick(TObject *Sender)
{
	if (InputOpenDialog->Execute())
	{
		FInputFile = InputOpenDialog->FileName;
		InputEdit->Text = FInputFile;
		StatusBar->SimpleText = FInputFile;
	}
}

//---------------------------------------------------------------------------

bool TForm1::Execute(const AnsiString Command)
{
	//OutputMemo->Text = Command;

	Application->ProcessMessages();

	// Create pipe for the console stdout.

	SECURITY_ATTRIBUTES sa;

	sa.nLength = sizeof(SECURITY_ATTRIBUTES);
	sa.bInheritHandle = true;
	sa.lpSecurityDescriptor = 0;

	HANDLE ReadPipeHandle;
	HANDLE WritePipeHandle;

	if (!CreatePipe(&ReadPipeHandle, &WritePipeHandle, &sa, 0))
	{
		return false;
	}

	// Create a console.

	STARTUPINFO si;

	ZeroMemory(&si, sizeof(STARTUPINFO));

	si.cb = sizeof(STARTUPINFO);
	si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
	si.wShowWindow = SW_HIDE;
	si.hStdOutput = WritePipeHandle;
	si.hStdError = WritePipeHandle;

	PROCESS_INFORMATION pi;

	ZeroMemory(&pi, sizeof(PROCESS_INFORMATION));

	int BufferLen = Command.WideCharBufSize();
	wchar_t* cmd = new(wchar_t[BufferLen]);

	BOOL result = CreateProcess
	(
		L"ffmpeg.exe",
		Command.WideChar(cmd, BufferLen),
		0,
		0,
		true,
		0,
		0,
		0,
		&si,
		&pi
	);

	delete [] cmd;

	if (!result)
	{
		OutputMemo->Lines->Text = L"Error launching ffmpeg!";
		return false;
	}

	// Read from pipe.

	char Data[8192];

	for (;;)
	{
		// Allow UI to be a bit more responsive.

		Application->ProcessMessages();

		DWORD BytesRead;
		DWORD TotalBytes;
		DWORD BytesLeft;

		// Check for the presence of data in the pipe.

		PeekNamedPipe(ReadPipeHandle, Data, sizeof(Data), &BytesRead,
			&TotalBytes, &BytesLeft);

		// If there are bytes, read them

		if (BytesRead) {
			ReadFile(ReadPipeHandle, Data, sizeof(Data) - 1, &BytesRead, 0);
			Data[BytesRead] = 0;

			OutputMemo->Lines->Add(AnsiString(Data));

		}
		else {
			// Is the console app terminated?

			if (WaitForSingleObject(pi.hProcess, 0) == WAIT_OBJECT_0) {
				break;
			}

		}
	}

	CloseHandle(pi.hThread);
	CloseHandle(pi.hProcess);
	CloseHandle(ReadPipeHandle);
	CloseHandle(WritePipeHandle);

	return true;
}

//---------------------------------------------------------------------------

/*

We get a block like this one.

[Parsed_loudnorm_0 @ 000001c8dcab3920]
{
	"input_i" : "-23.23",
	"input_tp" : "-7.05",
	"input_lra" : "2.80",
	"input_thresh" : "-33.67",
	"output_i" : "-22.85",
	"output_tp" : "-6.83",
	"output_lra" : "1.00",
	"output_thresh" : "-33.24",
	"normalization_type" : "dynamic",
	"target_offset" : "-0.15"
}
*/

void TForm1::ParseJSON
(
	std::map <AnsiString, AnsiString>& Dictionary,
	AnsiString Text /* CSV ! */
)
{
	std::auto_ptr<TStringList> StringList(new TStringList(0));
	StringList.get()->CommaText = Text;

	const AnsiString Pattern = "^\\s*\"(\\S+)\" : \"(\\S+)\".*$";

	const int CompileOptions = PCRE_ANCHORED | PCRE_DOLLAR_ENDONLY;
	const char* ErrorPointer = 0;
	int ErrorOffset          = 0;

	const unsigned char* TablePointer = pcre_maketables();

	pcre* CompiledPattern = pcre_compile
	(
		Pattern.c_str(),
		CompileOptions,
		&ErrorPointer,
		&ErrorOffset,
		TablePointer
	);

	const int ExecOptions = 0;

	// n == 2, so (n + 1) * 3 == 9

	const int MatchVectorSize = 9;

	int MatchVector[MatchVectorSize];

	int LineCount = StringList.get()->Count;

	for(int Idx = 0; Idx < LineCount; ++Idx)
	{
		AnsiString Line = StringList->Strings[Idx];

		int ExecResult = pcre_exec
		(
			CompiledPattern,
			0,
			Line.c_str(),
			Line.Length(),
			ExecOptions,
			MatchVector,
			MatchVectorSize
		);

		bool Matched;

		switch(ExecResult)
		{
			case PCRE_ERROR_NOMATCH:
			case PCRE_ERROR_NULL:
			case PCRE_ERROR_BADOPTION:
			case PCRE_ERROR_BADMAGIC:
			case PCRE_ERROR_UNKNOWN_NODE:
			case PCRE_ERROR_NOMEMORY:
				Matched = false;
				break;
			default:
				Matched = true;
		}

		if(Matched)
		{
			AnsiString Key = Line.SubString
			(
				MatchVector[2] + 1,
				MatchVector[3] - MatchVector[2]
			);

			AnsiString Value = Line.SubString
			(
				MatchVector[4] + 1,
				MatchVector[5] - MatchVector[4]
			);

			Dictionary[Key] = Value;
		}
	}

	free(CompiledPattern);

}

//---------------------------------------------------------------------------

void __fastcall TForm1::DoBitBtnClick(TObject *Sender)
{
	// Collect input.

	int Loudness = LoudnessUpDown->Position;
	int TruePeak = TruePeakUpDown->Position;
	int LoudnessRange = LoudnessRangeUpDown->Position;
	int ProcessingMode = ProcessingModeRadioGroup->ItemIndex;
	int FrameLength = FrameLengthUpDown->Position;
	int GaussFilterSize = GaussFilterUpDown->Position;

	if (GaussFilterSize % 2 == 0)
	{
		// Must be odd.

		GaussFilterSize += 1;
	}

	float TargetPeak = TargetPeakUpDown->Position / 100.;
	float MaxGainFactor = MaxGainUpDown->Position;
	float TargetRMS = TargetRMSUpDown->Position / 100.;
	float CompressFactor = CompressFactorUpDown->Position;
	int ChannelCoupling = ChannelCouplingCheckBox->Checked ? 1 : 0;
	int DCBiasCorrection = DCBiasCorrectionCheckBox->Checked ? 1 : 0;
	int AlternativeBoundaryMode = AlternativeBoundaryModeCheckBox->Checked ? 1 : 0;

	// Create FFMPEG command.

	AnsiString FFMPEGCommand;

	TDateTime RightNow = Time();
	unsigned short Hours, Minutes, Seconds, Milliseconds;
	RightNow.DecodeTime(&Hours, &Minutes, &Seconds, &Milliseconds);

	AnsiString TempFile = 	IncludeTrailingBackslash(ExtractFilePath(FInputFile)) +
							ChangeFileExt(ExtractFileName(FInputFile), " tmp ") +
							AnsiString().sprintf("%d-%d-%d-%d", Hours, Minutes, Seconds, Milliseconds) +
							".wav";
	AnsiString OutputFile = IncludeTrailingBackslash(ExtractFilePath(FInputFile)) +
							ChangeFileExt(ExtractFileName(FInputFile), " ") +
							AnsiString().sprintf("%d-%d-%d-%d", Hours, Minutes, Seconds, Milliseconds) +
							".wav";

	switch (ProcessingMode)
	{
		case 0:
			OutputMemo->Text = "Scanning " + FInputFile;

			FFMPEGCommand = AnsiString().sprintf
			(
				"ffmpeg -i \"%s\" -af loudnorm=I=%d:TP=%d:LRA=%d:linear=true:print_format=json -f null -",
				FInputFile,
				Loudness,
				TruePeak,
				LoudnessRange
			);

			if(Execute(FFMPEGCommand))
			{
				// The OutputMemo contains a JSON block;

				std::map <AnsiString, AnsiString> Dictionary;
				ParseJSON(Dictionary, OutputMemo->Lines->CommaText);
				OutputMemo->Clear();
				OutputMemo->Lines->Add(ExtractFileName(FInputFile));
				OutputMemo->Lines->Add(AnsiString().sprintf
				(
					"Loudness: %s LUFS",
					Dictionary["input_i"])
				);
				OutputMemo->Lines->Add(AnsiString().sprintf
				(
					"True peak: %s dBTP",
					Dictionary["input_tp"])
				);
				OutputMemo->Lines->Add(AnsiString().sprintf
				(
					"Loudness range: %s LU",
					Dictionary["input_lra"])
				);
			}

			break;

		case 1:
			OutputMemo->Text = "One pass for " + FInputFile;
			FFMPEGCommand = AnsiString().sprintf
			(
				"ffmpeg -i \"%s\" -af loudnorm=I=%d:TP=%d:LRA=%d:linear=false -ar 48k -acodec pcm_s24le \"%s\"",
				FInputFile,
				Loudness,
				TruePeak,
				LoudnessRange,
				OutputFile
			);

			Execute(FFMPEGCommand);
			OutputMemo->Lines->Add("Done!");

			break;

		case 2:
			OutputMemo->Text = "Pass 1: scanning " + FInputFile;

			FFMPEGCommand = AnsiString().sprintf
			(
				"ffmpeg -i \"%s\" -af loudnorm=I=%d:TP=%d:LRA=%d:linear=true:print_format=json -f null -",
				FInputFile,
				Loudness,
				TruePeak,
				LoudnessRange
			);

			if(Execute(FFMPEGCommand))
			{
				// The OutputMemo contains a JSON block;

				std::map <AnsiString, AnsiString> Dictionary;
				ParseJSON(Dictionary, OutputMemo->Lines->CommaText);

				// Build ffmpeg string for pass 2 with obtained parameters.

				FFMPEGCommand = AnsiString().sprintf
				(
					"ffmpeg -i \"%s\" -af loudnorm=I=%d:TP=%d:LRA=%d:measured_I=%s:measured_LRA=%s:measured_TP=%s:measured_thresh=%s:offset=%s:linear=true:print_format=summary -ar 48k -acodec pcm_s24le \"%s\"",
					FInputFile,
					Loudness,
					TruePeak,
					LoudnessRange,
					Dictionary["input_i"],
					Dictionary["input_lra"],
					Dictionary["input_tp"],
					Dictionary["output_thresh"],
					Dictionary["target_offset"],
					OutputFile
				);

				OutputMemo->Lines->Add("Pass 2: linear gain change " + FInputFile);
				OutputMemo->Lines->Add(FFMPEGCommand);
				Execute(FFMPEGCommand);
				OutputMemo->Lines->Add("Done!");
			}

			break;
		case 3:
			OutputMemo->Text = "Pass 1: dynamic control ";

			FFMPEGCommand = AnsiString().sprintf
			(
				"ffmpeg -i \"%s\" -af \"dynaudnorm=f=%d:p=%f:m=%f:s=%f:g=%d:r=%f:b=%d:n=%d:c=%d\" -acodec pcm_s24le \"%s\"",
				FInputFile,
				FrameLength,
				TargetPeak,
				MaxGainFactor,
				CompressFactor,
				GaussFilterSize,
				TargetRMS,
				AlternativeBoundaryMode,
				ChannelCoupling,
				DCBiasCorrection,
				TempFile
			);

			OutputMemo->Lines->Add(FFMPEGCommand);

			Execute(FFMPEGCommand);

			// This next line will intentionally clear the console.

			OutputMemo->Text = "Pass 2: scanning loudness..." + TempFile;

			FFMPEGCommand = AnsiString().sprintf
			(
				"ffmpeg -i \"%s\" -af loudnorm=I=%d:TP=%d:LRA=%d:linear=true:print_format=json -f null -",
				TempFile,
				Loudness,
				TruePeak,
				LoudnessRange
			);

			if(Execute(FFMPEGCommand))
			{
				// The OutputMemo contains a JSON block;

				std::map <AnsiString, AnsiString> Dictionary;
				ParseJSON(Dictionary, OutputMemo->Lines->CommaText);

				// Build ffmpeg string for pass 2 with obtained parameters.

				FFMPEGCommand = AnsiString().sprintf
				(
					"ffmpeg -i \"%s\" -af loudnorm=I=%d:TP=%d:LRA=%d:measured_I=%s:measured_LRA=%s:measured_TP=%s:measured_thresh=%s:offset=%s:linear=true:print_format=summary -ar 48k -acodec pcm_s24le \"%s\"",
					TempFile,
					Loudness,
					TruePeak,
					LoudnessRange,
					Dictionary["input_i"],
					Dictionary["input_lra"],
					Dictionary["input_tp"],
					Dictionary["output_thresh"],
					Dictionary["target_offset"],
					OutputFile
				);

				OutputMemo->Lines->Add("Pass 3: linear gain change " + FInputFile);
				OutputMemo->Lines->Add(FFMPEGCommand);
				Execute(FFMPEGCommand);
				OutputMemo->Lines->Add("Done!");
			}


			break;
	}



}

//---------------------------------------------------------------------------

void __fastcall TForm1::SavePresetButtonClick(TObject *Sender)
{
	AnsiString Result = InputBox("Preset name?", "", "");

	if(Result.Trim().Length())
	{
		FPresets->Put("Loudness", LoudnessUpDown->Position);
		FPresets->Put("TruePeak", TruePeakUpDown->Position);
		FPresets->Put("LoudnessRange", LoudnessRangeUpDown->Position);
		FPresets->Put("ProcessingMode", ProcessingModeRadioGroup->ItemIndex);
		FPresets->Put("FrameLength", FrameLengthUpDown->Position);
		FPresets->Put("GaussFilterSize", GaussFilterUpDown->Position);
		FPresets->Put("TargetPeak", TargetPeakUpDown->Position);
		FPresets->Put("MaxGainFactor", MaxGainUpDown->Position);
		FPresets->Put("TargetRMS", TargetRMSUpDown->Position);
		FPresets->Put("CompressFactor", CompressFactorUpDown->Position);
		FPresets->Put("ChannelCoupling", ChannelCouplingCheckBox->Checked ? 1 : 0);
		FPresets->Put("DCBiasCorrection", DCBiasCorrectionCheckBox->Checked ? 1 : 0);
		FPresets->Put("AlternativeBoundaryMode", AlternativeBoundaryModeCheckBox->Checked ? 1 : 0);
		FPresets->Put("Memo", PresetMemo->Text);

		wchar_t Name[256];

		if(::GetUserName(Name, static_cast <unsigned long> (sizeof(Name))))
		{
			FPresets->Put("User", Name);
		}
		FPresets->Put("Timestamp", Now());

		FPresets->Save(Result);
	}
}

//---------------------------------------------------------------------------

// Click on small label opens website.

void __fastcall TForm1::Label11Click(TObject *Sender)
{
	ShellExecute(0, L"open", L"https://henszimmerman.audio", 0, 0, SW_SHOWNORMAL);
}

//---------------------------------------------------------------------------

