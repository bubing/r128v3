//---------------------------------------------------------------------------

#include "Presets.h"

#include <tchar.h>
#include <XMLDoc.hpp>
#include <XMLIntf.hpp>
#include <ComObj.hpp>
#include <stdio.h>

//---------------------------------------------------------------------------

static const AnsiString CSubFolder = "presets\\";

//---------------------------------------------------------------------------

TPresets::TPresets(const AnsiString Directory) :
FDirectory(IncludeTrailingBackslash(Directory))
{
	CoInitializeEx(NULL, 0);

	// Make sure presets directory exists.

	ForceDirectories(FDirectory + CSubFolder);
}

//---------------------------------------------------------------------------

void TPresets::AvailablePresets(std::vector <AnsiString>& List)
{
	List.clear();

	TSearchRec SearchRec;

	AnsiString Mask = FDirectory + CSubFolder + "\\*.xml";


	if (FindFirst(Mask, faAnyFile, SearchRec) == 0)
	{
		do
		{
			// Chop off .xml because we're a bunch of nerds.

			List.push_back(ChangeFileExt(SearchRec.Name, ""));
		} while (FindNext(SearchRec) == 0);

		FindClose(SearchRec);
	}
}

//---------------------------------------------------------------------------

// Load a preset. Filename is passed w/o extension (which is always .xml).

void TPresets::Load(const AnsiString Filename)
{

	AnsiString FullName = FDirectory + CSubFolder + Filename + ".xml";

	if(!FileExists(FullName, false))
	{
		ShowMessage("Preset not found");

		return;
	}

	// Get rid of old values.

	FKeyValues.clear();

	// Load from disk.

	_di_IXMLDocument document = interface_cast<Xmlintf::IXMLDocument> (new TXMLDocument(0));

	document->Active = true;

	document->LoadFromFile(FullName);

	// Find our root node.

	const _di_IXMLNode NodeElement = document->ChildNodes->FindNode("R128preset");

	// Traverse child nodes and store key/value pairs.

	for (int idx = 0; idx < NodeElement->ChildNodes->Count; idx++)
	{
		const _di_IXMLNode Node = NodeElement->ChildNodes->Get(idx);

		Node->NodeName;
		Node->Text;
	}


}

//---------------------------------------------------------------------------

void TPresets::Save(const AnsiString Filename)
{
	_di_IXMLDocument document = interface_cast<Xmlintf::IXMLDocument> (new TXMLDocument(0));

	document->Active = true;

	document->SetEncoding("utf-8");
	document->NodeIndentStr = "  ";
	document->Options = document->Options + (TXMLDocOptions() << doNodeAutoIndent);

	// Define document content.

	document->DocumentElement = document->CreateNode("R128preset", ntElement, "");
	document->DocumentElement->Attributes["License"] = "CC Attribution-NonCommercial 4.0 International";
	document->DocumentElement->Attributes["Programming"] = "Hens Zimmerman Audio";

	for(std::map<AnsiString, AnsiString>::iterator idx = FKeyValues.begin();
		idx != FKeyValues.end(); ++idx)
	{
		AnsiString Key = idx->first;
		AnsiString Value = idx->second;

		_di_IXMLNode nodeElement = document->DocumentElement->AddChild(Key, -1);
		nodeElement->Text = Value;
	}

	document->SaveToFile(FDirectory + CSubFolder + Filename + ".xml");

}

//---------------------------------------------------------------------------

AnsiString TPresets::Get(const AnsiString Key, const AnsiString Def)
{
	return Def;
}

//---------------------------------------------------------------------------

int TPresets::Get(const AnsiString Key, const int Def)
{
	return Def;
}

//---------------------------------------------------------------------------

void TPresets::Put(const AnsiString Key, const AnsiString Value)
{
	FKeyValues[Key] = Value;
}

//---------------------------------------------------------------------------

void TPresets::Put(const AnsiString Key, const int Value)
{
	FKeyValues[Key] = IntToStr(Value);
}

//---------------------------------------------------------------------------


